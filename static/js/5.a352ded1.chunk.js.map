{"version":3,"sources":["containers/Checkout/Order.js","containers/Orders/Orders.js","containers/Checkout/Order.module.css"],"names":["order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","style","textTransform","display","margin","border","padding","key","className","styles","Order","Number","parseFloat","price","toFixed","datetime","connect","state","orders","loading","token","auth","userId","dispatch","onFetchOrders","actions","withErrorHandler","useEffect","Spinner","id","orderTime","axios","module","exports"],"mappings":"kKAgCeA,EA7BD,SAACC,GACX,IAAMC,EAAc,GACpB,IAAK,IAAIC,KAAkBF,EAAMC,YAC7BA,EAAYE,KAAK,CACbC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAIlC,IAAMI,EAAmBL,EAAYM,KAAI,SAAAC,GACrC,OAAO,0BACHC,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,OAEbC,IAAKP,EAAGJ,MARL,IAQcI,EAAGJ,KARjB,IAQwBI,EAAGH,OAR3B,QAUX,OACI,yBAAKW,UAAWC,IAAOC,OACnB,4CAAkBZ,GAClB,sCAAW,uCAAaa,OAAOC,WAAWpB,EAAMqB,OAAOC,QAAQ,KAC/D,yCAAc,gCAAStB,EAAMuB,a,uCC+B1BC,uBAfS,SAAAC,GACpB,MAAO,CACHC,OAAQD,EAAM1B,MAAM2B,OACpBC,QAASF,EAAM1B,MAAM4B,QACrBC,MAAOH,EAAMI,KAAKD,MAClBE,OAAQL,EAAMI,KAAKC,WAIA,SAAAC,GACvB,MAAO,CACHC,cAAe,SAACJ,EAAOE,GAAR,OAAmBC,EAASE,IAAoBL,EAAOE,QAI/DN,CAA6CU,aAjD7C,SAAAlC,GAAU,IAEdgC,EAAiBhC,EAAjBgC,cAEPG,qBAAU,WACNH,EAAchC,EAAM4B,MAAO5B,EAAM8B,UAClC,CAACE,IAEA,IAAIN,EAAS,kBAACU,EAAA,EAAD,MAiBb,OAhBKpC,EAAM2B,UACPD,EACI1B,EAAM0B,OAAOnB,KACT,SAAAR,GAAK,OAEL,kBAACmB,EAAD,CAEIH,IAAKhB,EAAMsC,GACXpC,YAAaF,EAAME,YACnBoB,MAAOtB,EAAMsB,MACbE,SAAUxB,EAAMuC,gBAO5B,6BACKZ,KAsBoEa,O,mBCzDrFC,EAAOC,QAAU,CAAC,MAAQ","file":"static/js/5.a352ded1.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './Order.module.css';\n\nconst order = (props) => {\n    const ingredients = [];\n    for (let ingredientName in props.ingredients) {\n        ingredients.push({\n            name: ingredientName,\n            amount: props.ingredients[ingredientName]\n        });\n    }\n\n    const ingredientOutput = ingredients.map(ig => {\n        return <span\n            style={{\n                textTransform: 'capitalize',\n                display: 'inline-block',\n                margin: '0 8px',\n                border: '1px solid #ccc',\n                padding: '5px'\n            }}\n            key={ig.name} > {ig.name}({ig.amount})</span>;\n    });\n    return (\n        <div className={styles.Order}>\n            <p> Ingredients: {ingredientOutput}</p>\n            <p> Price: <strong>USD {Number.parseFloat(props.price).toFixed(2)}</strong></p>\n            <p> Datetime: <strong>{props.datetime}</strong></p>\n        </div>\n    );\n};\n\nexport default order;","\nimport React, { useEffect } from 'react';\nimport Order from '../../containers/Checkout/Order';\nimport axios from '../../axios-orders';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nconst Orders = props => {\n\n    const {onFetchOrders} = props;\n\n    useEffect(() =>{\n        onFetchOrders(props.token, props.userId);\n    }, [onFetchOrders]);\n    \n        let orders = <Spinner />\n        if (!props.loading) {\n            orders =\n                props.orders.map(\n                    order => (\n                        \n                    <Order\n                    \n                        key={order.id}\n                        ingredients={order.ingredients}\n                        price={order.price}\n                        datetime={order.orderTime}\n                    />\n                    )\n                    );\n\n        }\n        return (\n            <div>\n                {orders}\n            </div>\n\n        );\n    \n}\n\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__6rHU6\"};"],"sourceRoot":""}