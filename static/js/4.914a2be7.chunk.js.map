{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css"],"names":["connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onSetAuthRedirectPath","props","useState","elementType","elementConfig","type","placeholder","value","validation","required","minLength","isEmail","valid","touched","authForm","setAuthForm","setIsSignUp","useEffect","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","event","controlName","updateControls","updateObject","target","checkValidity","inputChangedHandler","errorMessage","message","authRedirect","to","className","styles","Auth","onSubmit","preventDefault","btnType","clicked","input","validationError","inputElement","InputStyles","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label","module","exports"],"mappings":"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","file":"static/js/4.914a2be7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport styles from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nconst Auth = props => {\n    const [authForm, setAuthForm] = useState( {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Email',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 2,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6,\n\n                },\n                valid: false,\n                touched: false\n\n            },\n        });\n\n        const [isSignup, setIsSignUp] = useState(true);\n\n        const{buildingBurger, authRedirectPath,onSetAuthRedirectPath} = props\n\n    useEffect(()=> {\n        if (!buildingBurger && authRedirectPath !== '/') {\n            onSetAuthRedirectPath();\n        }\n    },[buildingBurger, authRedirectPath, onSetAuthRedirectPath]);\n\n   \n\n   const inputChangedHandler = (event, controlName) => {\n        const updateControls = updateObject(authForm,\n            {\n                [controlName]: updateObject(authForm[controlName],\n                    {\n                        value: event.target.value,\n                        valid: checkValidity(event.target.value, authForm[controlName].validation),\n                        touched: true\n                    }\n\n                )\n            });\n        setAuthForm(updateControls);\n    }\n\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n        props.onAuth(authForm.email.value, authForm.password.value, isSignup);\n    }\n\n    const switchAuthModeHandler = () => {\n        setIsSignUp(!isSignup);\n    }\n\n        let formElementsArray = [];\n        for (let key in authForm) {\n            formElementsArray.push({\n                id: key,\n                config: authForm[key],\n            })\n        }\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => inputChangedHandler(event, formElement.id)}\n            />\n\n        ));\n\n        if (props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n\n        if (props.error) {\n            errorMessage = (\n                <p>\n                    {props.error.message}\n                </p>\n            );\n        }\n        let authRedirect = null;\n        if (props.isAuthenticated) {\n            authRedirect = <Redirect to={props.authRedirectPath} />\n\n        }\n        return (\n            <div className={styles.Auth}>\n\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={submitHandler}>\n                    {form}\n                    <Button btnType='Success'>SUBMIT</Button>\n                </form>\n                <Button clicked={switchAuthModeHandler} btnType='Danger'>SWITCH TO {isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        );\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\nimport styles from './Input.module.css';\n \n\n\nconst input = (props) => {\n    let validationError = null;\n    let inputElement = null;\n    const InputStyles = [styles.InputElement];\n    if (props.invalid && props.shouldValidate && props.touched) {\n        InputStyles.push(styles.Invalid);\n        validationError = <p>Please enter a valid value!</p>;\n    }\nswitch (props.elementType) {\n    case ('input'):\n    inputElement = <input \n    className={InputStyles.join(' ')} \n    {...props.elementConfig} \n    value={props.value}\n    onChange={props.changed}/>;\n    break;\n        \n    case ('textarea'):\n    inputElement = <textarea \n    className={styles.InputElement}\n    {...props.elementConfig} \n    value={props.value}\n    onChange={props.changed}/>;    \n    break;\n\n    case ('select'):\n    inputElement = <select\n     className={styles.InputElement}\n     value={props.value}\n     onChange={props.changed}>\n    {\n        props.elementConfig.options.map(option=>(\n            <option \n            key={option.value} \n            value={option.value}\n            onChange={props.changed}>\n                {option.displayValue}\n            </option>\n        ))\n    }\n\n     </select>;    \n    break;\n\n    default:\n    inputElement = <input \n    className={styles.InputElement}\n    {...props.elementConfig} \n    value={props.value}/>;\n    break;\n}\n\nreturn (\n<div className={styles.Input}>\n    <label className={styles.Label} >\n        {props.label}\n        {inputElement}\n        {validationError}\n    </label>\n\n</div>\n);\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};"],"sourceRoot":""}