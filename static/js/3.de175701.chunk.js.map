{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","styles","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","useState","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","stress","zipcode","country","email","deliveryMethod","options","displayValue","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementArray","key","push","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","orderTime","Date","toLocaleString","map","formElement","Input","invalid","shouldValidate","changed","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","formValid","inputId","inputChangedHandler","disabled","Spinner","ContactData","axios","purchased","summary","to","purchasedRedirect","history","goBack","replace","path","match","component","input","validationError","inputElement","InputStyles","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.de175701.chunk.js","sourcesContent":["import React from 'react';\nimport Burger from '../../Burger/Burger'\nimport Button from '../../UI/Button/Button'\nimport styles from './CheckoutSummary.module.css'\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={styles.CheckoutSummary}>\n            <h1>We hope it tatse well</h1>\n            <div style={{ width: '100%', margin: 'auto' }}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button btnType='Success' clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    )\n}\n\nexport default checkoutSummary;","import React, { useState } from 'react';\nimport Button from '../../../components/UI/Button/Button'\nimport styles from './ContactData.module.css'\nimport axios from \"../../../axios-orders\";\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport {connect} from 'react-redux';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport {updateObject, checkValidity} from '../../../shared/utility';\n\nconst ContactData = props => {\n    const[orderForm, setOrderForm] = useState({\n            name: {\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Name'\n                },\n                value:'',\n                validation:{\n                    required: true,\n                    minLength: 2,\n                    \n                },\n                valid: false,\n                touched: false\n        \n            },\n            \n            stress: {\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Street',\n                },\n                value:'',\n                validation:{\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipcode: {\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'ZIP Code'\n                },\n                value:'',\n                validation:{\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Country'\n                },\n                value:'',\n                validation:{\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            \n            email: {\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'Email'\n                },\n                value:'',\n                validation:{\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n\n            deliveryMethod: {\n                elementType:'select',\n                elementConfig:{\n                    options: [\n                        {\n                        value:'fastest',\n                        displayValue:'Fastest',\n                    },\n                    {\n                        value:'cheapest',\n                        displayValue:'Cheapest',\n                    }\n                ]\n                },\n                \n                value:'fastest',\n                validation: {},\n                valid: true,\n                \n            },\n        })\n\n        const [formIsValid,setFormIsValid] = useState(false);\n         \n    \n\n    \n\n    const inputChangedHandler = (event, inputIdentifier )=>{\n        \n        const updatedFormElement =  updateObject(orderForm[inputIdentifier],{\n            value:event.target.value,\n            valid:checkValidity(event.target.value, orderForm[inputIdentifier].validation),\n            touched:true\n        });\n        const updatedOrderForm = updateObject(orderForm,{\n            [inputIdentifier]: updatedFormElement\n        });\n        \n        \n        let formValid = true;\n\n        for (let inputId in updatedOrderForm) {\n            formValid = updatedOrderForm[inputId].valid && formValid;\n        }\n        setOrderForm(updatedOrderForm);\n        setFormIsValid(formValid);\n        \n        \n        \n    }\n    const orderHandler = (event) => {\n        event.preventDefault();\n        \n        const formData = {};\n        for (let formElementIdentifier in orderForm) {\n            formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: props.ings,\n            price: props.price,\n            orderTime : new Date().toLocaleString(),\n            orderData: formData,\n            userId: props.userId\n        }\n        props.onOrderBurger(order, props.token);\n\n    }\n    \n\n        let formElementArray = [];\n        for (let key in orderForm) {\n            formElementArray.push({\n                id:key,\n                config:orderForm[key],\n            })\n        }\n\n        let form = (<form onSubmit={orderHandler}>\n            {\n                formElementArray.map(formElement=>\n                    (\n                        <Input \n                        key= {formElement.id}\n                        elementType= {formElement.config.elementType}\n                        elementConfig = {formElement.config.elementConfig}\n                        value = {formElement.config.value}\n                        invalid = {!formElement.config.valid}\n                        shouldValidate = {formElement.config.validation}\n                        touched = {formElement.config.touched}\n                        changed = {(event)=>inputChangedHandler(event,formElement.id) } />\n                    ))}\n            \n            <Button btnType=\"Success\" disabled={!formIsValid}>ORDER</Button>\n        </form>);\n        if (props.loading) {\n            form = <Spinner />\n        }\n        return (\n\n            <div className={styles.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n\n            </div>\n        );\n    \n}\n\nconst mapStateToProps = state =>{\n    return{\n        ings:state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading:state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n};\n\nconst mapDispatchToProps = dispatch =>{\n    return{\n        onOrderBurger:(orderData,token)=>dispatch(actions.purchaseBurger(orderData,token))\n\n    };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps )(withErrorHandler(ContactData,axios));","import React from 'react';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport { Route, Redirect } from 'react-router-dom';\nimport ContactData from './ContactData/ContactData';\nimport { connect } from 'react-redux';\n// import * as actions from '../../store/actions/index';\n\nconst Checkout = props => {\n\n    \n    //  \n    const checkoutCancelledHandler = () => {\n        props.history.goBack()\n    }\n    const checkoutContinuedHandler = () => {\n        props.history.replace('/checkout/contact-data');\n\n    }\n    \n        let summary = <Redirect to=\"/\" />\n        if (props.ings) {\n            const purchasedRedirect= props.purchased ? <Redirect to='/'/> :null;\n            summary = (\n                \n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary ingredients={props.ings}\n                        checkoutCancelled={checkoutCancelledHandler}\n                        checkoutContinued={checkoutContinuedHandler} />\n                    <Route\n                        path={props.match.path + '/contact-data'}\n                        component={ContactData} />\n                </div>\n            );\n        }\n        return summary ;\n    \n\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n        // price: state.totalPrice\n    }\n}\n\n// const mapDispatchtoProps = dispatch =>{\n//   return {\n//     onInitPurchase: ()=> dispatch(actions.purchaseInit())\n//   };\n// };\n\nexport default connect(mapStateToProps)(Checkout);\n","import React from 'react';\nimport styles from './Input.module.css';\n \n\n\nconst input = (props) => {\n    let validationError = null;\n    let inputElement = null;\n    const InputStyles = [styles.InputElement];\n    if (props.invalid && props.shouldValidate && props.touched) {\n        InputStyles.push(styles.Invalid);\n        validationError = <p>Please enter a valid value!</p>;\n    }\nswitch (props.elementType) {\n    case ('input'):\n    inputElement = <input \n    className={InputStyles.join(' ')} \n    {...props.elementConfig} \n    value={props.value}\n    onChange={props.changed}/>;\n    break;\n        \n    case ('textarea'):\n    inputElement = <textarea \n    className={styles.InputElement}\n    {...props.elementConfig} \n    value={props.value}\n    onChange={props.changed}/>;    \n    break;\n\n    case ('select'):\n    inputElement = <select\n     className={styles.InputElement}\n     value={props.value}\n     onChange={props.changed}>\n    {\n        props.elementConfig.options.map(option=>(\n            <option \n            key={option.value} \n            value={option.value}\n            onChange={props.changed}>\n                {option.displayValue}\n            </option>\n        ))\n    }\n\n     </select>;    \n    break;\n\n    default:\n    inputElement = <input \n    className={styles.InputElement}\n    {...props.elementConfig} \n    value={props.value}/>;\n    break;\n}\n\nreturn (\n<div className={styles.Input}>\n    <label className={styles.Label} >\n        {props.label}\n        {inputElement}\n        {validationError}\n    </label>\n\n</div>\n);\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};"],"sourceRoot":""}